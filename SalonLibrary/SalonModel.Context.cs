//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SalonLibrary
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class SalonManagementSystemEntities : DbContext
    {
        public SalonManagementSystemEntities()
            : base("name=SalonManagementSystemEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Appointment> Appointments { get; set; }
        public DbSet<AppointmentService> AppointmentServices { get; set; }
        public DbSet<Customer> Customers { get; set; }
        public DbSet<Employee> Employees { get; set; }
        public DbSet<EmployeeType> EmployeeTypes { get; set; }
        public DbSet<Service> Services { get; set; }
        public DbSet<ServiceType> ServiceTypes { get; set; }
        public DbSet<Product> Products { get; set; }
        public DbSet<ProductCategory> ProductCategories { get; set; }
        public DbSet<Stock> Stocks { get; set; }
        public DbSet<Expense> Expenses { get; set; }
        public DbSet<ProductService> ProductServices { get; set; }
        public DbSet<Client> Clients { get; set; }
        public DbSet<Account> Accounts { get; set; }
        public DbSet<ClientType> ClientTypes { get; set; }
    
        public virtual ObjectResult<Nullable<int>> DeleteAppointment(Nullable<int> appointmentID, string userName)
        {
            var appointmentIDParameter = appointmentID.HasValue ?
                new ObjectParameter("appointmentID", appointmentID) :
                new ObjectParameter("appointmentID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DeleteAppointment", appointmentIDParameter, userNameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DeleteAppointmentService(Nullable<int> appointmentServiceID, Nullable<int> appointmentID, string userName)
        {
            var appointmentServiceIDParameter = appointmentServiceID.HasValue ?
                new ObjectParameter("appointmentServiceID", appointmentServiceID) :
                new ObjectParameter("appointmentServiceID", typeof(int));
    
            var appointmentIDParameter = appointmentID.HasValue ?
                new ObjectParameter("appointmentID", appointmentID) :
                new ObjectParameter("appointmentID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DeleteAppointmentService", appointmentServiceIDParameter, appointmentIDParameter, userNameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DeleteCustomer(Nullable<int> customerID, string userName)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DeleteCustomer", customerIDParameter, userNameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DeleteEmployee(Nullable<int> employeeID, string userName)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("employeeID", employeeID) :
                new ObjectParameter("employeeID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DeleteEmployee", employeeIDParameter, userNameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DeleteEmployeeType(Nullable<int> employeeTypeID, string userName)
        {
            var employeeTypeIDParameter = employeeTypeID.HasValue ?
                new ObjectParameter("employeeTypeID", employeeTypeID) :
                new ObjectParameter("employeeTypeID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DeleteEmployeeType", employeeTypeIDParameter, userNameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DeleteInvoice(Nullable<int> invoiceID, string userName)
        {
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("invoiceID", invoiceID) :
                new ObjectParameter("invoiceID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DeleteInvoice", invoiceIDParameter, userNameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DeleteService(Nullable<int> serviceID, string userName)
        {
            var serviceIDParameter = serviceID.HasValue ?
                new ObjectParameter("serviceID", serviceID) :
                new ObjectParameter("serviceID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DeleteService", serviceIDParameter, userNameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DeleteServiceType(Nullable<int> serviceTypeID, string userName)
        {
            var serviceTypeIDParameter = serviceTypeID.HasValue ?
                new ObjectParameter("serviceTypeID", serviceTypeID) :
                new ObjectParameter("serviceTypeID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DeleteServiceType", serviceTypeIDParameter, userNameParameter);
        }
    
        public virtual ObjectResult<GetAppointment_Result> GetAppointment(Nullable<int> appointmentID, Nullable<int> customerID, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> statusID, Nullable<int> clientID)
        {
            var appointmentIDParameter = appointmentID.HasValue ?
                new ObjectParameter("appointmentID", appointmentID) :
                new ObjectParameter("appointmentID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("customerID", customerID) :
                new ObjectParameter("customerID", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("statusID", statusID) :
                new ObjectParameter("statusID", typeof(int));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("clientID", clientID) :
                new ObjectParameter("clientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAppointment_Result>("GetAppointment", appointmentIDParameter, customerIDParameter, dateFromParameter, dateToParameter, statusIDParameter, clientIDParameter);
        }
    
        public virtual ObjectResult<GetAppointmentService_Result> GetAppointmentService(Nullable<int> appointmentServiceID, Nullable<int> appointmentID, Nullable<int> clientID)
        {
            var appointmentServiceIDParameter = appointmentServiceID.HasValue ?
                new ObjectParameter("appointmentServiceID", appointmentServiceID) :
                new ObjectParameter("appointmentServiceID", typeof(int));
    
            var appointmentIDParameter = appointmentID.HasValue ?
                new ObjectParameter("appointmentID", appointmentID) :
                new ObjectParameter("appointmentID", typeof(int));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("clientID", clientID) :
                new ObjectParameter("clientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAppointmentService_Result>("GetAppointmentService", appointmentServiceIDParameter, appointmentIDParameter, clientIDParameter);
        }
    
        public virtual ObjectResult<GetCustomer_Result> GetCustomer(Nullable<int> customerID, string phoneNumber, Nullable<int> clientID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("customerID", customerID) :
                new ObjectParameter("customerID", typeof(int));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("phoneNumber", phoneNumber) :
                new ObjectParameter("phoneNumber", typeof(string));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("clientID", clientID) :
                new ObjectParameter("clientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomer_Result>("GetCustomer", customerIDParameter, phoneNumberParameter, clientIDParameter);
        }
    
        public virtual ObjectResult<GetEmployee_Result> GetEmployee(Nullable<int> employeeID, string emailAddress, Nullable<int> clientID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("employeeID", employeeID) :
                new ObjectParameter("employeeID", typeof(int));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("emailAddress", emailAddress) :
                new ObjectParameter("emailAddress", typeof(string));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("clientID", clientID) :
                new ObjectParameter("clientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployee_Result>("GetEmployee", employeeIDParameter, emailAddressParameter, clientIDParameter);
        }
    
        public virtual ObjectResult<GetEmployeeType_Result> GetEmployeeType(Nullable<int> clientID)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("clientID", clientID) :
                new ObjectParameter("clientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeType_Result>("GetEmployeeType", clientIDParameter);
        }
    
        public virtual ObjectResult<GetInvoice_Result> GetInvoice(Nullable<int> invoiceID)
        {
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("invoiceID", invoiceID) :
                new ObjectParameter("invoiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInvoice_Result>("GetInvoice", invoiceIDParameter);
        }
    
        public virtual ObjectResult<GetService_Result> GetService(Nullable<int> serviceID, Nullable<int> clientID)
        {
            var serviceIDParameter = serviceID.HasValue ?
                new ObjectParameter("serviceID", serviceID) :
                new ObjectParameter("serviceID", typeof(int));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("clientID", clientID) :
                new ObjectParameter("clientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetService_Result>("GetService", serviceIDParameter, clientIDParameter);
        }
    
        public virtual ObjectResult<GetServiceType_Result> GetServiceType(Nullable<int> serviceTypeID, Nullable<int> serviceID, Nullable<int> clientID)
        {
            var serviceTypeIDParameter = serviceTypeID.HasValue ?
                new ObjectParameter("serviceTypeID", serviceTypeID) :
                new ObjectParameter("serviceTypeID", typeof(int));
    
            var serviceIDParameter = serviceID.HasValue ?
                new ObjectParameter("serviceID", serviceID) :
                new ObjectParameter("serviceID", typeof(int));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("clientID", clientID) :
                new ObjectParameter("clientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetServiceType_Result>("GetServiceType", serviceTypeIDParameter, serviceIDParameter, clientIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SetAppointment(Nullable<int> appointmentID, Nullable<System.DateTime> appointmentDateTime, Nullable<int> appointmentStatusID, Nullable<int> customerID, Nullable<System.DateTime> invoiceDate, Nullable<decimal> additionalCost, string paymentMode, string notes, string userName, Nullable<int> clientID)
        {
            var appointmentIDParameter = appointmentID.HasValue ?
                new ObjectParameter("appointmentID", appointmentID) :
                new ObjectParameter("appointmentID", typeof(int));
    
            var appointmentDateTimeParameter = appointmentDateTime.HasValue ?
                new ObjectParameter("appointmentDateTime", appointmentDateTime) :
                new ObjectParameter("appointmentDateTime", typeof(System.DateTime));
    
            var appointmentStatusIDParameter = appointmentStatusID.HasValue ?
                new ObjectParameter("appointmentStatusID", appointmentStatusID) :
                new ObjectParameter("appointmentStatusID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("customerID", customerID) :
                new ObjectParameter("customerID", typeof(int));
    
            var invoiceDateParameter = invoiceDate.HasValue ?
                new ObjectParameter("invoiceDate", invoiceDate) :
                new ObjectParameter("invoiceDate", typeof(System.DateTime));
    
            var additionalCostParameter = additionalCost.HasValue ?
                new ObjectParameter("additionalCost", additionalCost) :
                new ObjectParameter("additionalCost", typeof(decimal));
    
            var paymentModeParameter = paymentMode != null ?
                new ObjectParameter("paymentMode", paymentMode) :
                new ObjectParameter("paymentMode", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("notes", notes) :
                new ObjectParameter("notes", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("clientID", clientID) :
                new ObjectParameter("clientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SetAppointment", appointmentIDParameter, appointmentDateTimeParameter, appointmentStatusIDParameter, customerIDParameter, invoiceDateParameter, additionalCostParameter, paymentModeParameter, notesParameter, userNameParameter, clientIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SetAppointmentService(Nullable<int> appointmentServiceID, Nullable<int> appointmentID, Nullable<int> serviceTypeID, Nullable<int> serviceID, Nullable<int> employeeID, string notes, string userName, Nullable<int> clientID)
        {
            var appointmentServiceIDParameter = appointmentServiceID.HasValue ?
                new ObjectParameter("appointmentServiceID", appointmentServiceID) :
                new ObjectParameter("appointmentServiceID", typeof(int));
    
            var appointmentIDParameter = appointmentID.HasValue ?
                new ObjectParameter("appointmentID", appointmentID) :
                new ObjectParameter("appointmentID", typeof(int));
    
            var serviceTypeIDParameter = serviceTypeID.HasValue ?
                new ObjectParameter("serviceTypeID", serviceTypeID) :
                new ObjectParameter("serviceTypeID", typeof(int));
    
            var serviceIDParameter = serviceID.HasValue ?
                new ObjectParameter("serviceID", serviceID) :
                new ObjectParameter("serviceID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("employeeID", employeeID) :
                new ObjectParameter("employeeID", typeof(int));
    
            var notesParameter = notes != null ?
                new ObjectParameter("notes", notes) :
                new ObjectParameter("notes", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("clientID", clientID) :
                new ObjectParameter("clientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SetAppointmentService", appointmentServiceIDParameter, appointmentIDParameter, serviceTypeIDParameter, serviceIDParameter, employeeIDParameter, notesParameter, userNameParameter, clientIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SetCustomer(Nullable<int> customerID, string firstName, string lastName, Nullable<System.DateTime> dateOfBirth, string phoneNumber, string alternatePhoneNumber, string emailAddress, string password, string address, string city, string notes, string userName, Nullable<int> clientID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("customerID", customerID) :
                new ObjectParameter("customerID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            var dateOfBirthParameter = dateOfBirth.HasValue ?
                new ObjectParameter("dateOfBirth", dateOfBirth) :
                new ObjectParameter("dateOfBirth", typeof(System.DateTime));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("phoneNumber", phoneNumber) :
                new ObjectParameter("phoneNumber", typeof(string));
    
            var alternatePhoneNumberParameter = alternatePhoneNumber != null ?
                new ObjectParameter("alternatePhoneNumber", alternatePhoneNumber) :
                new ObjectParameter("alternatePhoneNumber", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("emailAddress", emailAddress) :
                new ObjectParameter("emailAddress", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("notes", notes) :
                new ObjectParameter("notes", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("clientID", clientID) :
                new ObjectParameter("clientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SetCustomer", customerIDParameter, firstNameParameter, lastNameParameter, dateOfBirthParameter, phoneNumberParameter, alternatePhoneNumberParameter, emailAddressParameter, passwordParameter, addressParameter, cityParameter, notesParameter, userNameParameter, clientIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SetEmployee(Nullable<int> employeeID, string fullName, string phoneNumber, string alternatePhoneNumber, Nullable<System.DateTime> dateOfBirth, string cNIC, string emailAddress, string password, string address, Nullable<int> employeeTypeID, string notes, string userName, Nullable<int> clientID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("employeeID", employeeID) :
                new ObjectParameter("employeeID", typeof(int));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("fullName", fullName) :
                new ObjectParameter("fullName", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("phoneNumber", phoneNumber) :
                new ObjectParameter("phoneNumber", typeof(string));
    
            var alternatePhoneNumberParameter = alternatePhoneNumber != null ?
                new ObjectParameter("alternatePhoneNumber", alternatePhoneNumber) :
                new ObjectParameter("alternatePhoneNumber", typeof(string));
    
            var dateOfBirthParameter = dateOfBirth.HasValue ?
                new ObjectParameter("dateOfBirth", dateOfBirth) :
                new ObjectParameter("dateOfBirth", typeof(System.DateTime));
    
            var cNICParameter = cNIC != null ?
                new ObjectParameter("cNIC", cNIC) :
                new ObjectParameter("cNIC", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("emailAddress", emailAddress) :
                new ObjectParameter("emailAddress", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var employeeTypeIDParameter = employeeTypeID.HasValue ?
                new ObjectParameter("employeeTypeID", employeeTypeID) :
                new ObjectParameter("employeeTypeID", typeof(int));
    
            var notesParameter = notes != null ?
                new ObjectParameter("notes", notes) :
                new ObjectParameter("notes", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("clientID", clientID) :
                new ObjectParameter("clientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SetEmployee", employeeIDParameter, fullNameParameter, phoneNumberParameter, alternatePhoneNumberParameter, dateOfBirthParameter, cNICParameter, emailAddressParameter, passwordParameter, addressParameter, employeeTypeIDParameter, notesParameter, userNameParameter, clientIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SetEmployeeType(Nullable<int> employeeTypeID, string name, string description, string notes, string userName, Nullable<int> clientID)
        {
            var employeeTypeIDParameter = employeeTypeID.HasValue ?
                new ObjectParameter("employeeTypeID", employeeTypeID) :
                new ObjectParameter("employeeTypeID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("notes", notes) :
                new ObjectParameter("notes", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("clientID", clientID) :
                new ObjectParameter("clientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SetEmployeeType", employeeTypeIDParameter, nameParameter, descriptionParameter, notesParameter, userNameParameter, clientIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SetInvoice(Nullable<int> invoiceID, Nullable<System.DateTime> date, Nullable<decimal> totalCost, Nullable<decimal> additionalCost, string paymentMode, Nullable<int> customerID, Nullable<int> appointmentID, string notes, string userName)
        {
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("invoiceID", invoiceID) :
                new ObjectParameter("invoiceID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var totalCostParameter = totalCost.HasValue ?
                new ObjectParameter("totalCost", totalCost) :
                new ObjectParameter("totalCost", typeof(decimal));
    
            var additionalCostParameter = additionalCost.HasValue ?
                new ObjectParameter("additionalCost", additionalCost) :
                new ObjectParameter("additionalCost", typeof(decimal));
    
            var paymentModeParameter = paymentMode != null ?
                new ObjectParameter("paymentMode", paymentMode) :
                new ObjectParameter("paymentMode", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("customerID", customerID) :
                new ObjectParameter("customerID", typeof(int));
    
            var appointmentIDParameter = appointmentID.HasValue ?
                new ObjectParameter("appointmentID", appointmentID) :
                new ObjectParameter("appointmentID", typeof(int));
    
            var notesParameter = notes != null ?
                new ObjectParameter("notes", notes) :
                new ObjectParameter("notes", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SetInvoice", invoiceIDParameter, dateParameter, totalCostParameter, additionalCostParameter, paymentModeParameter, customerIDParameter, appointmentIDParameter, notesParameter, userNameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SetService(Nullable<int> serviceID, string name, string notes, string userName, Nullable<int> clientID)
        {
            var serviceIDParameter = serviceID.HasValue ?
                new ObjectParameter("serviceID", serviceID) :
                new ObjectParameter("serviceID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("notes", notes) :
                new ObjectParameter("notes", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("clientID", clientID) :
                new ObjectParameter("clientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SetService", serviceIDParameter, nameParameter, notesParameter, userNameParameter, clientIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SetServiceType(Nullable<int> serviceTypeID, Nullable<int> serviceID, string name, Nullable<decimal> cost, Nullable<decimal> timeRequired, string notes, string userName, Nullable<int> clientID)
        {
            var serviceTypeIDParameter = serviceTypeID.HasValue ?
                new ObjectParameter("serviceTypeID", serviceTypeID) :
                new ObjectParameter("serviceTypeID", typeof(int));
    
            var serviceIDParameter = serviceID.HasValue ?
                new ObjectParameter("serviceID", serviceID) :
                new ObjectParameter("serviceID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var costParameter = cost.HasValue ?
                new ObjectParameter("cost", cost) :
                new ObjectParameter("cost", typeof(decimal));
    
            var timeRequiredParameter = timeRequired.HasValue ?
                new ObjectParameter("timeRequired", timeRequired) :
                new ObjectParameter("timeRequired", typeof(decimal));
    
            var notesParameter = notes != null ?
                new ObjectParameter("notes", notes) :
                new ObjectParameter("notes", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("clientID", clientID) :
                new ObjectParameter("clientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SetServiceType", serviceTypeIDParameter, serviceIDParameter, nameParameter, costParameter, timeRequiredParameter, notesParameter, userNameParameter, clientIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DeleteProduct(Nullable<int> productID, string userName)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("productID", productID) :
                new ObjectParameter("productID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DeleteProduct", productIDParameter, userNameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DeleteProductCategory(Nullable<int> productCategoryID, string userName)
        {
            var productCategoryIDParameter = productCategoryID.HasValue ?
                new ObjectParameter("productCategoryID", productCategoryID) :
                new ObjectParameter("productCategoryID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DeleteProductCategory", productCategoryIDParameter, userNameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DeleteStock(Nullable<int> stockID, string userName)
        {
            var stockIDParameter = stockID.HasValue ?
                new ObjectParameter("stockID", stockID) :
                new ObjectParameter("stockID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DeleteStock", stockIDParameter, userNameParameter);
        }
    
        public virtual ObjectResult<GetProduct_Result> GetProduct(Nullable<int> productID, Nullable<int> productCategoryID, Nullable<int> clientID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("productID", productID) :
                new ObjectParameter("productID", typeof(int));
    
            var productCategoryIDParameter = productCategoryID.HasValue ?
                new ObjectParameter("productCategoryID", productCategoryID) :
                new ObjectParameter("productCategoryID", typeof(int));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("clientID", clientID) :
                new ObjectParameter("clientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProduct_Result>("GetProduct", productIDParameter, productCategoryIDParameter, clientIDParameter);
        }
    
        public virtual ObjectResult<GetProductCategory_Result> GetProductCategory(Nullable<int> productCategoryID, Nullable<int> clientID)
        {
            var productCategoryIDParameter = productCategoryID.HasValue ?
                new ObjectParameter("productCategoryID", productCategoryID) :
                new ObjectParameter("productCategoryID", typeof(int));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("clientID", clientID) :
                new ObjectParameter("clientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProductCategory_Result>("GetProductCategory", productCategoryIDParameter, clientIDParameter);
        }
    
        public virtual ObjectResult<GetStock_Result> GetStock(Nullable<int> stockID, Nullable<int> clientID)
        {
            var stockIDParameter = stockID.HasValue ?
                new ObjectParameter("stockID", stockID) :
                new ObjectParameter("stockID", typeof(int));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("clientID", clientID) :
                new ObjectParameter("clientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStock_Result>("GetStock", stockIDParameter, clientIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SetProduct(Nullable<int> productID, Nullable<int> productCategoryID, string productName, string notes, string userName, Nullable<int> clientID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("productID", productID) :
                new ObjectParameter("productID", typeof(int));
    
            var productCategoryIDParameter = productCategoryID.HasValue ?
                new ObjectParameter("productCategoryID", productCategoryID) :
                new ObjectParameter("productCategoryID", typeof(int));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("productName", productName) :
                new ObjectParameter("productName", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("notes", notes) :
                new ObjectParameter("notes", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("clientID", clientID) :
                new ObjectParameter("clientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SetProduct", productIDParameter, productCategoryIDParameter, productNameParameter, notesParameter, userNameParameter, clientIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SetProductCategory(Nullable<int> productCategoryID, string name, string notes, string userName, Nullable<int> clientID)
        {
            var productCategoryIDParameter = productCategoryID.HasValue ?
                new ObjectParameter("productCategoryID", productCategoryID) :
                new ObjectParameter("productCategoryID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("notes", notes) :
                new ObjectParameter("notes", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("clientID", clientID) :
                new ObjectParameter("clientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SetProductCategory", productCategoryIDParameter, nameParameter, notesParameter, userNameParameter, clientIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SetStock(Nullable<int> stockID, Nullable<System.DateTime> date, Nullable<int> productID, Nullable<int> productCategoryID, Nullable<decimal> quantity, Nullable<decimal> price, string notes, string userName, Nullable<int> clientID)
        {
            var stockIDParameter = stockID.HasValue ?
                new ObjectParameter("stockID", stockID) :
                new ObjectParameter("stockID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("productID", productID) :
                new ObjectParameter("productID", typeof(int));
    
            var productCategoryIDParameter = productCategoryID.HasValue ?
                new ObjectParameter("productCategoryID", productCategoryID) :
                new ObjectParameter("productCategoryID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(decimal));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            var notesParameter = notes != null ?
                new ObjectParameter("notes", notes) :
                new ObjectParameter("notes", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("clientID", clientID) :
                new ObjectParameter("clientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SetStock", stockIDParameter, dateParameter, productIDParameter, productCategoryIDParameter, quantityParameter, priceParameter, notesParameter, userNameParameter, clientIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DeleteExpense(Nullable<int> expenseID, string userName)
        {
            var expenseIDParameter = expenseID.HasValue ?
                new ObjectParameter("expenseID", expenseID) :
                new ObjectParameter("expenseID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DeleteExpense", expenseIDParameter, userNameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DeleteProductService(Nullable<int> productServiceID, string userName)
        {
            var productServiceIDParameter = productServiceID.HasValue ?
                new ObjectParameter("productServiceID", productServiceID) :
                new ObjectParameter("productServiceID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DeleteProductService", productServiceIDParameter, userNameParameter);
        }
    
        public virtual ObjectResult<GetExpense_Result> GetExpense(Nullable<int> expenseID, Nullable<int> clientID)
        {
            var expenseIDParameter = expenseID.HasValue ?
                new ObjectParameter("expenseID", expenseID) :
                new ObjectParameter("expenseID", typeof(int));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("clientID", clientID) :
                new ObjectParameter("clientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExpense_Result>("GetExpense", expenseIDParameter, clientIDParameter);
        }
    
        public virtual ObjectResult<GetProductService_Result> GetProductService(Nullable<int> productServiceID)
        {
            var productServiceIDParameter = productServiceID.HasValue ?
                new ObjectParameter("productServiceID", productServiceID) :
                new ObjectParameter("productServiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProductService_Result>("GetProductService", productServiceIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SetExpense(Nullable<int> expenseID, Nullable<int> expenseTypeID, string typeName, Nullable<System.DateTime> date, Nullable<decimal> amount, string notes, string userName, Nullable<int> clientID)
        {
            var expenseIDParameter = expenseID.HasValue ?
                new ObjectParameter("expenseID", expenseID) :
                new ObjectParameter("expenseID", typeof(int));
    
            var expenseTypeIDParameter = expenseTypeID.HasValue ?
                new ObjectParameter("expenseTypeID", expenseTypeID) :
                new ObjectParameter("expenseTypeID", typeof(int));
    
            var typeNameParameter = typeName != null ?
                new ObjectParameter("typeName", typeName) :
                new ObjectParameter("typeName", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(decimal));
    
            var notesParameter = notes != null ?
                new ObjectParameter("notes", notes) :
                new ObjectParameter("notes", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("clientID", clientID) :
                new ObjectParameter("clientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SetExpense", expenseIDParameter, expenseTypeIDParameter, typeNameParameter, dateParameter, amountParameter, notesParameter, userNameParameter, clientIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SetProductService(Nullable<int> productServiceID, Nullable<int> serviceID, Nullable<int> serviceTypeID, Nullable<int> productCategoryID, Nullable<int> productID, Nullable<decimal> quantity, string notes, string userName)
        {
            var productServiceIDParameter = productServiceID.HasValue ?
                new ObjectParameter("productServiceID", productServiceID) :
                new ObjectParameter("productServiceID", typeof(int));
    
            var serviceIDParameter = serviceID.HasValue ?
                new ObjectParameter("serviceID", serviceID) :
                new ObjectParameter("serviceID", typeof(int));
    
            var serviceTypeIDParameter = serviceTypeID.HasValue ?
                new ObjectParameter("serviceTypeID", serviceTypeID) :
                new ObjectParameter("serviceTypeID", typeof(int));
    
            var productCategoryIDParameter = productCategoryID.HasValue ?
                new ObjectParameter("productCategoryID", productCategoryID) :
                new ObjectParameter("productCategoryID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("productID", productID) :
                new ObjectParameter("productID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(decimal));
    
            var notesParameter = notes != null ?
                new ObjectParameter("notes", notes) :
                new ObjectParameter("notes", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SetProductService", productServiceIDParameter, serviceIDParameter, serviceTypeIDParameter, productCategoryIDParameter, productIDParameter, quantityParameter, notesParameter, userNameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DeleteAccount(Nullable<int> accountID, string userName)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("accountID", accountID) :
                new ObjectParameter("accountID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DeleteAccount", accountIDParameter, userNameParameter);
        }
    
        public virtual ObjectResult<GetAccount_Result> GetAccount(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> clientID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("clientID", clientID) :
                new ObjectParameter("clientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAccount_Result>("GetAccount", fromDateParameter, toDateParameter, clientIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SetAccount(Nullable<int> accountID, Nullable<int> objectID, Nullable<int> moduleID, Nullable<System.DateTime> date, string description, Nullable<decimal> debit, Nullable<decimal> credit, string notes, string userName, Nullable<int> clientID)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("accountID", accountID) :
                new ObjectParameter("accountID", typeof(int));
    
            var objectIDParameter = objectID.HasValue ?
                new ObjectParameter("objectID", objectID) :
                new ObjectParameter("objectID", typeof(int));
    
            var moduleIDParameter = moduleID.HasValue ?
                new ObjectParameter("moduleID", moduleID) :
                new ObjectParameter("moduleID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("debit", debit) :
                new ObjectParameter("debit", typeof(decimal));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("credit", credit) :
                new ObjectParameter("credit", typeof(decimal));
    
            var notesParameter = notes != null ?
                new ObjectParameter("notes", notes) :
                new ObjectParameter("notes", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("clientID", clientID) :
                new ObjectParameter("clientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SetAccount", accountIDParameter, objectIDParameter, moduleIDParameter, dateParameter, descriptionParameter, debitParameter, creditParameter, notesParameter, userNameParameter, clientIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DeleteClient(Nullable<int> clientID, string userName)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("clientID", clientID) :
                new ObjectParameter("clientID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DeleteClient", clientIDParameter, userNameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DeleteClientType(Nullable<int> clientTypeID, string userName)
        {
            var clientTypeIDParameter = clientTypeID.HasValue ?
                new ObjectParameter("clientTypeID", clientTypeID) :
                new ObjectParameter("clientTypeID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DeleteClientType", clientTypeIDParameter, userNameParameter);
        }
    
        public virtual ObjectResult<GetClient_Result> GetClient(Nullable<int> clientID)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("clientID", clientID) :
                new ObjectParameter("clientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetClient_Result>("GetClient", clientIDParameter);
        }
    
        public virtual ObjectResult<GetClientType_Result> GetClientType(Nullable<int> clientTypeID)
        {
            var clientTypeIDParameter = clientTypeID.HasValue ?
                new ObjectParameter("clientTypeID", clientTypeID) :
                new ObjectParameter("clientTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetClientType_Result>("GetClientType", clientTypeIDParameter);
        }
    
        public virtual ObjectResult<GetDashboardKPI_Result> GetDashboardKPI(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> clientID)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("clientID", clientID) :
                new ObjectParameter("clientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDashboardKPI_Result>("GetDashboardKPI", dateFromParameter, dateToParameter, clientIDParameter);
        }
    
        public virtual ObjectResult<GetMonthlySales_Result> GetMonthlySales(Nullable<int> clientID)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("clientID", clientID) :
                new ObjectParameter("clientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMonthlySales_Result>("GetMonthlySales", clientIDParameter);
        }
    
        public virtual ObjectResult<GetWeeklySales_Result> GetWeeklySales(Nullable<int> moduleID, Nullable<int> clientID)
        {
            var moduleIDParameter = moduleID.HasValue ?
                new ObjectParameter("moduleID", moduleID) :
                new ObjectParameter("moduleID", typeof(int));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("clientID", clientID) :
                new ObjectParameter("clientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWeeklySales_Result>("GetWeeklySales", moduleIDParameter, clientIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SetClient(Nullable<int> clientID, string name, string address, string mobile, string telephoneNumber, string email, string city, string country, Nullable<int> clientTypeID, string tagLine, string website, string nTN, string sNTN, string logo, string notes, string userName)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("clientID", clientID) :
                new ObjectParameter("clientID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("mobile", mobile) :
                new ObjectParameter("mobile", typeof(string));
    
            var telephoneNumberParameter = telephoneNumber != null ?
                new ObjectParameter("telephoneNumber", telephoneNumber) :
                new ObjectParameter("telephoneNumber", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("country", country) :
                new ObjectParameter("country", typeof(string));
    
            var clientTypeIDParameter = clientTypeID.HasValue ?
                new ObjectParameter("clientTypeID", clientTypeID) :
                new ObjectParameter("clientTypeID", typeof(int));
    
            var tagLineParameter = tagLine != null ?
                new ObjectParameter("tagLine", tagLine) :
                new ObjectParameter("tagLine", typeof(string));
    
            var websiteParameter = website != null ?
                new ObjectParameter("website", website) :
                new ObjectParameter("website", typeof(string));
    
            var nTNParameter = nTN != null ?
                new ObjectParameter("nTN", nTN) :
                new ObjectParameter("nTN", typeof(string));
    
            var sNTNParameter = sNTN != null ?
                new ObjectParameter("sNTN", sNTN) :
                new ObjectParameter("sNTN", typeof(string));
    
            var logoParameter = logo != null ?
                new ObjectParameter("logo", logo) :
                new ObjectParameter("logo", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("notes", notes) :
                new ObjectParameter("notes", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SetClient", clientIDParameter, nameParameter, addressParameter, mobileParameter, telephoneNumberParameter, emailParameter, cityParameter, countryParameter, clientTypeIDParameter, tagLineParameter, websiteParameter, nTNParameter, sNTNParameter, logoParameter, notesParameter, userNameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SetClientType(Nullable<int> clientTypeID, string typeName, Nullable<decimal> charges, string packageName, string notes, string userName)
        {
            var clientTypeIDParameter = clientTypeID.HasValue ?
                new ObjectParameter("clientTypeID", clientTypeID) :
                new ObjectParameter("clientTypeID", typeof(int));
    
            var typeNameParameter = typeName != null ?
                new ObjectParameter("typeName", typeName) :
                new ObjectParameter("typeName", typeof(string));
    
            var chargesParameter = charges.HasValue ?
                new ObjectParameter("charges", charges) :
                new ObjectParameter("charges", typeof(decimal));
    
            var packageNameParameter = packageName != null ?
                new ObjectParameter("packageName", packageName) :
                new ObjectParameter("packageName", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("notes", notes) :
                new ObjectParameter("notes", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SetClientType", clientTypeIDParameter, typeNameParameter, chargesParameter, packageNameParameter, notesParameter, userNameParameter);
        }
    
        public virtual ObjectResult<ftxt_Result> ftxt(string txt)
        {
            var txtParameter = txt != null ?
                new ObjectParameter("txt", txt) :
                new ObjectParameter("txt", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ftxt_Result>("ftxt", txtParameter);
        }
    }
}
